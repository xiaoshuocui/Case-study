function maxerror = Jacobi(m,n)
%% Set up grids & functions
dx = n\1;
dy = m\1;

x = dx:n\1:1-dx;
y = dy:m\1:1-dy;

f = @(x,y)       -(x-1)^3*(42*x^2-24*x+2)*y*(y-1)-2*x^2*(x-1)^5;
u_exact = @(x,y)     (x-1)^5*x^2*y*(y-1);

%% Generate matrics
e = ones(m-1,1);
T = spdiags([-e 2*e -e], -1:1, m-1, m-1);
B = 2/(dx)^2*eye(m-1,m-1) + 1/(dy)^2*T;
C = -1/(dx)^2*eye(m-1,m-1);

% generate matrix A
e1 = ones(n-1,1);
z1 = zeros(n-1,1);

a1 = eye(n-1);
a2 = spdiags([e1 z1 e1], -1:1, n-1, n-1);

A = kron(a1,B) + kron(a2,C);

%% Compute for u & Compare with exact soln
f1 = zeros();
u_exact1 = zeros();

for i = 1:n-1
    for j = 1:m-1
        f1(j,i) = f(x(i),y(j));
        u_exact1(j,i) = u_exact(x(i),y(j));
    end
end
f1 = f1(:);
u_exact1 = u_exact1(:);

%% Jacobi method
D = diag(diag(A));
L = tril(A,-1);
R = triu(A,1);
u = zeros((m-1)*(n-1),1);
iter = 0;
err = max(abs(A*u-f1));

while err > 10^-8   
    u = -D\(L+R)*u + D\f1;
    iter = iter + 1;
    err = max(abs(A*u-f1));
end

maxerror = max(abs(u - u_exact1));
disp(iter)
end
